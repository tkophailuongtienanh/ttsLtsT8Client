{"version":3,"sources":["pages/Modals.js"],"names":["Modals","isModalOpen","setIsModalOpen","useState","closeModal","React","createElement","Fragment","PageTitle","CTA","Button","onClick","Modal","isOpen","onClose","ModalHeader","ModalBody","ModalFooter","className","layout","block","size"],"mappings":"6IAAA,qDA8DeA,UAxDf,WACE,MAAOC,EAAaC,GAAkBC,oBAAS,GAM/C,SAASC,IACPF,GAAe,GAGjB,OACEG,IAAAC,cAAAD,IAAAE,SAAA,KACEF,IAAAC,cAACE,IAAS,KAAC,UACXH,IAAAC,cAACG,IAAG,MAEJJ,IAAAC,cAAA,WACED,IAAAC,cAACI,SAAM,CAACC,QAdd,WACET,GAAe,KAaiB,eAG9BG,IAAAC,cAACM,QAAK,CAACC,OAAQZ,EAAaa,QAASV,GACnCC,IAAAC,cAACS,cAAW,KAAC,gBACbV,IAAAC,cAACU,YAAS,KAAC,iHAIXX,IAAAC,cAACW,cAAW,KAMVZ,IAAAC,cAAA,OAAKY,UAAU,mBACbb,IAAAC,cAACI,SAAM,CAACS,OAAO,UAAUR,QAASP,GAAY,WAIhDC,IAAAC,cAAA,OAAKY,UAAU,mBACbb,IAAAC,cAACI,SAAM,KAAC,WAEVL,IAAAC,cAAA,OAAKY,UAAU,0BACbb,IAAAC,cAACI,SAAM,CAACU,OAAK,EAACC,KAAK,QAAQF,OAAO,UAAUR,QAASP,GAAY,WAInEC,IAAAC,cAAA,OAAKY,UAAU,0BACbb,IAAAC,cAACI,SAAM,CAACU,OAAK,EAACC,KAAK,SAAQ","file":"static/js/22.80b424ec.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nimport PageTitle from '../components/Typography/PageTitle'\nimport CTA from '../components/CTA'\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from '@windmill/react-ui'\n\nfunction Modals() {\n  const [isModalOpen, setIsModalOpen] = useState(false)\n\n  function openModal() {\n    setIsModalOpen(true)\n  }\n\n  function closeModal() {\n    setIsModalOpen(false)\n  }\n\n  return (\n    <>\n      <PageTitle>Modals</PageTitle>\n      <CTA />\n\n      <div>\n        <Button onClick={openModal}>Open modal</Button>\n      </div>\n\n      <Modal isOpen={isModalOpen} onClose={closeModal}>\n        <ModalHeader>Modal header</ModalHeader>\n        <ModalBody>\n          Lorem, ipsum dolor sit amet consectetur adipisicing elit. Nostrum et eligendi repudiandae\n          voluptatem tempore!\n        </ModalBody>\n        <ModalFooter>\n          {/* I don't like this approach. Consider passing a prop to ModalFooter\n           * that if present, would duplicate the buttons in a way similar to this.\n           * Or, maybe find some way to pass something like size=\"large md:regular\"\n           * to Button\n           */}\n          <div className=\"hidden sm:block\">\n            <Button layout=\"outline\" onClick={closeModal}>\n              Cancel\n            </Button>\n          </div>\n          <div className=\"hidden sm:block\">\n            <Button>Accept</Button>\n          </div>\n          <div className=\"block w-full sm:hidden\">\n            <Button block size=\"large\" layout=\"outline\" onClick={closeModal}>\n              Cancel\n            </Button>\n          </div>\n          <div className=\"block w-full sm:hidden\">\n            <Button block size=\"large\">\n              Accept\n            </Button>\n          </div>\n        </ModalFooter>\n      </Modal>\n    </>\n  )\n}\n\nexport default Modals\n"],"sourceRoot":""}